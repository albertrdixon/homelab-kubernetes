createAggregateRoles: true

global:
  image:
    repository: alinbalutoiu/argocd
    tag: linux-arm64-v2.2.2

  securityContext:
    runAsUser: 65534
    runAsGroup: 65534
    fsGroup: 65534

controller:
  logFormat: json
  logLevel: error

  containerSecurityContext:
    capabilities:
      drop:
        - all
    readOnlyRootFilesystem: true
    runAsNonRoot: true

  metrics:
    enabled: true
    service:
      annotations:
        prometheus.io/scrape: "true"

dex:
  containerSecurityContext:
    capabilities:
      drop:
        - all
    readOnlyRootFilesystem: true

  metrics:
    enabled: true
    service:
      annotations:
        prometheus.io/scrape: "true"

redis:
  image:
    repository: arm64v8/redis
    tag: 6.2-alpine

  containerSecurityContext:
    capabilities:
      drop:
        - all
    readOnlyRootFilesystem: true

  metrics:
    enabled: true

    image:
      repository: oliver006/redis_exporter
      tag: latest-arm64
      pullPolicy: Always
    service:
      annotations:
        prometheus.io/scrape: "true"

server:
  name: server

  resources:
    requests:
      cpu: 50m
      memory: 64Mi

  autoscaling:
    enabled: false

  logFormat: json
  logLevel: error

  containerSecurityContext:
    capabilities:
      drop:
        - all
    readOnlyRootFilesystem: true

  metrics:
    enabled: true
    service:
      annotations:
        prometheus.io/scrape: "true"

  extraArgs:
    - --insecure

  ingress:
    enabled: false

  config:
    url: https://{{ env `ARGOCD_UI_DOMAIN` }}

    dex.config: |
      logger:
        level: error
        format: json
      connectors:
        - type: github
          id: github
          name: GitHub
          config:
            clientID: $dex.github.client.id
            clientSecret: $dex.github.client.secret
            orgs:
              - name: $dex.github.organization

    resource.compareoptions: |
      ignoreResourceStatusField: all

    resource.customizations.health.cert-manager.io_Certificate: |
      hs = {}
      if obj.status ~= nil then
        if obj.status.conditions ~= nil then
          for i, condition in ipairs(obj.status.conditions) do
            if condition.type == "Ready" and condition.status == "False" then
              hs.status = "Degraded"
              hs.message = condition.message
              return hs
            end
            if condition.type == "Ready" and condition.status == "True" then
              hs.status = "Healthy"
              hs.message = condition.message
              return hs
            end
          end
        end
      end
      hs.status = "Progressing"
      hs.message = "Waiting for certificate"
      return hs

    resource.customizations.ignoreDifferences.admissionregistration.k8s.io_MutatingWebhookConfiguration: |
      jqPathExpressions:
        - .webhooks[]?.clientConfig.caBundle

  rbacConfig:
    policy.default: role:readonly-limited
    policy.csv: |
      p, role:readonly-limited, applications, get, */*, allow
      p, role:readonly-limited, projects, get, *, allow
      p, role:readonly-limited, clusters, get, *, allow

      p, role:sync, applications, sync, */*, allow

      p, role:application-admin, applications, *, */*, allow
      p, role:account-admin, accounts, *, *, allow

      g, role:sync, role:readonly
      g, role:application:admin, role:readonly
      g, role:account-admin, role:readonly
      g, moopholo:family, role:admin

configs:
  secret:
    createSecret: false
